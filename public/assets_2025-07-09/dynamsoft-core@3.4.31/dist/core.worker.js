/*!
 * Dynamsoft JavaScript Library
 * @product Dynamsoft Core JS Edition
 * @website https://www.dynamsoft.com
 * @copyright Copyright 2024, Dynamsoft Corporation
 * @author Dynamsoft
 * @version 3.4.31
 * @fileoverview Dynamsoft JavaScript Library for Core
 * More info on Dynamsoft Core JS: https://www.dynamsoft.com/capture-vision/docs/web/programming/javascript/api-reference/core/core-module.html
 */
!function(){"use strict";const e=e=>e&&"object"==typeof e&&"function"==typeof e.then,s=(async()=>{})().constructor;class t extends s{get status(){return this._s}get isPending(){return"pending"===this._s}get isFulfilled(){return"fulfilled"===this._s}get isRejected(){return"rejected"===this._s}get task(){return this._task}set task(t){let a;this._task=t,e(t)?a=t:"function"==typeof t&&(a=new s(t)),a&&(async()=>{try{const e=await a;t===this._task&&this.resolve(e)}catch(e){t===this._task&&this.reject(e)}})()}get isEmpty(){return null==this._task}constructor(s){let t,a;super(((e,s)=>{t=e,a=s})),this._s="pending",this.resolve=s=>{this.isPending&&(e(s)?this.task=s:(this._s="fulfilled",t(s)))},this.reject=e=>{this.isPending&&(this._s="rejected",a(e))},this.task=s}}const a=self,n={};a.coreWorkerVersion="3.4.31",a.versions=n;const r={},o=a.waitAsyncDependency=async e=>{let s="string"==typeof e?[e]:e,a=[];for(let e of s)a.push(r[e]=r[e]||new t);await Promise.all(a)},i=async(e,s)=>{let a,n="string"==typeof e?[e]:e,o=[];for(let e of n){let n;o.push(n=r[e]=r[e]||new t(a=a||s())),n.isEmpty&&(n.task=a=a||s())}await Promise.all(o)},c=[];a.setBufferIntoWasm=(e,s=0,t=0,a=0)=>{t&&(e=a?e.subarray(t,a):e.subarray(t));let n=c[s]=c[s]||{ptr:0,size:0,maxSize:0};return e.length>n.maxSize&&(n.ptr&&d._free(n.ptr),n.ptr=d._malloc(e.length),n.maxSize=e.length),d.HEAPU8.set(e,n.ptr),n.size=e.length,n.ptr};const l={buffer:0,size:0,pos:0,temps:[],needed:0,prepare:function(){if(l.needed){for(let e=0;e<l.temps.length;e++)d._free(l.temps[e]);l.temps.length=0,d._free(l.buffer),l.buffer=0,l.size+=l.needed,l.needed=0}l.buffer||(l.size+=128,l.buffer=d._malloc(l.size)),l.pos=0},alloc:function(e,s){let t,a=s.BYTES_PER_ELEMENT,n=e.length*a;return n=n+7&-8,l.pos+n>=l.size?(l.needed+=n,t=d._malloc(n),l.temps.push(t)):(t=l.buffer+l.pos,l.pos+=n),t},copy:function(e,s,t){switch(t>>>=0,s.BYTES_PER_ELEMENT){case 2:t>>>=1;break;case 4:t>>>=2;break;case 8:t>>>=3}for(let a=0;a<e.length;a++)s[t+a]=e[a]}},m=a.ep=l.prepare;a.bDebug=!1,a.bLog=!1,a.strDomain=void 0;const p=a.es=e=>{let s=intArrayFromString(e),t=l.alloc(s,d.HEAP8);return l.copy(s,d.HEAP8,t),t},d=a.Module={print:e=>{a.bLog&&f(e)},printErr:e=>{a.bLog&&f(e)},locateFile:(e,s)=>["std.wasm","core.wasm"].includes(e)?g[e.split(".")[0]]+e:e},g=a.engineResourcePaths={},_=a.loadCore=async()=>{const e="core";await i(e,(async()=>{let s=a.bLog&&(f(e+" loading..."),Date.now())||0,t=new Promise((t=>{Module.onRuntimeInitialized=()=>{a.bLog&&f(e+" initialized, cost "+(Date.now()-s)+" ms"),t(void 0)}})),n=g.std+"std.js";importScripts(n),await t}))},u=a.loadSideModule=async(e,{js:s,wasm:t})=>{await i(e,(async()=>{await o("core");let t=a.bLog&&(f(e+" loading..."),Date.now())||0;if(s instanceof Array)for(let t of s){let s=g[e]+t;importScripts(s)}else if(s){let s=g[e]+e+".worker.js";importScripts(s)}wasmImports.emscripten_bind_CoreWasm_PreSetModuleExist&&(m(),wasmImports.emscripten_bind_CoreWasm_PreSetModuleExist(p(e.toUpperCase()))),wasmImports.emscripten_bind_CvrWasm_SetModuleExist&&(m(),wasmImports.emscripten_bind_CvrWasm_SetModuleExist(p(e.toUpperCase())));const r=JSON.parse(UTF8ToString(wasmImports.emscripten_bind_CoreWasm_GetModuleVersion_0())),i=a[`${e}WorkerVersion`];n[e]={worker:`${i||"No Worker"}`,wasm:r[e.toUpperCase()]},a.bLog&&f(e+" initialized, cost "+(Date.now()-t)+" ms")}))},h=a.mapController={loadWasm:async(e,s)=>{try{Object.assign(g,e.engineResourcePaths),e.needLoadCore&&(e.bLog&&(a.bLog=!0),e.dm&&(a.strDomain=e.dm),e.bd&&(a.bDebug=!0),await _());for(let s of e.names)await u(s,e.autoResources[s]);if(e.needLoadCore){const e=JSON.parse(UTF8ToString(wasmImports.emscripten_bind_CoreWasm_GetModuleVersion_0()));n.core={worker:a.coreWorkerVersion,wasm:e.CORE}}y(s,{versions:n})}catch(e){console.log(e),b(s,e)}},setBLog:e=>{a.bLog=e.value},setBDebug:e=>{a.bDebug=e.value},getModuleVersion:async(e,s)=>{try{let e=UTF8ToString(wasmImports.emscripten_bind_CoreWasm_GetModuleVersion_0());y(s,{versions:JSON.parse(e)})}catch(e){b(s,e)}},cfd:async(e,s)=>{try{wasmImports.emscripten_bind_CoreWasm_static_CFD_1(e.count),y(s,{})}catch(e){b(s,e)}}};addEventListener("message",(e=>{const s=e.data?e.data:e,t=s.body,a=s.id,n=s.instanceID,r=h[s.type];if(!r)throw new Error("Unmatched task: "+s.type);r(t,a,n)}));const y=a.handleTaskRes=(e,s)=>{postMessage({type:"task",id:e,body:Object.assign({success:!0},s)})},b=a.handleTaskErr=(e,s)=>{postMessage({type:"task",id:e,body:{success:!1,message:(null==s?void 0:s.message)||s?.name||s?.constructor?.toString()||"No error message.",stack:a.bDebug&&(null==s?void 0:s.stack)||"No stack."}})},f=a.log=e=>{postMessage({type:"log",message:e})}}(),Object.assign(mapController,{dps_createInstance:async(e,s)=>{try{let e=await wasmImports.emscripten_bind_DpsWasm_createInstance();handleTaskRes(s,{instanceID:e})}catch(e){handleTaskErr(s,e)}},dps_initCVRSettings:async(e,s,t)=>{let a;try{const n=e.settings;ep(),a=UTF8ToString(wasmImports.emscripten_bind_DpsWasm_initCVRSettings(t,es(n))),handleTaskRes(s,{success:!0,response:a})}catch(e){handleTaskErr(s,e)}},dps_initSettings:async(e,s,t)=>{let a;try{const n=e.settings;ep(),a=UTF8ToString(wasmImports.emscripten_bind_DpsWasm_initSettings(t,es(n))),handleTaskRes(s,{success:!0,response:a})}catch(e){handleTaskErr(s,e)}},dps_setPanoramicBaseImage:async(e,s,t)=>{await checkAndReauth();try{const a=Date.now();let n;ep(),n=e.bytes?.length?UTF8ToString(wasmImports.emscripten_bind_DpsWasm_stitchImage(t,e.bytes.length,setBufferIntoWasm(e.bytes,0),e.width,e.height,e.stride,e.format,0,es(e.templateName))):UTF8ToString(wasmImports.emscripten_bind_DpsWasm_stitchImage(t,0,0,0,0,0,0,0,es(e.templateName)));const r=Date.now()-a;n=JSON.parse(n);for(let e of n.capturedPanoramaArray){let s=e?.image?.bytes;s?.ptr?(s=new Uint8Array(new Uint8Array(HEAP8.buffer,s.ptr,s.length)),e.image.bytes=s):delete e.image}n.timeCost=r,n.memory=HEAP8.length,handleTaskRes(s,{success:!0,response:n})}catch(e){handleTaskErr(s,e)}},dps_clean:async(e,s,t)=>{try{await wasmImports.emscripten_bind_DpsWasm_clean(t),handleTaskRes(s)}catch(e){handleTaskErr(s,e)}},dps_deleteInstance:async(e,s,t)=>{try{await wasmImports.emscripten_bind_DpsWasm_deleteInstance(t),handleTaskRes(s)}catch(e){handleTaskErr(s,e)}}});